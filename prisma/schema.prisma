datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String      @id @default(cuid())
  name               String
  email              String      @unique
  emailVerified      DateTime?
  description        String?
  image              String?
  accessToken        String?     @db.Text
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  accounts           Account[]
  sessions           Session[]
  adminGroups        Group[]
  userGroupRelations UserGroupRelation[]
  posts              Post[]
}

model Group {
  id                 String      @id @default(cuid())
  name               String
  description        String?
  image              String
  adminUserId        String
  productId          String      @unique
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  adminUser          User     @relation(fields: [adminUserId], references: [id], onDelete: Restrict)
  userGroupRelations UserGroupRelation[]
  posts              Post[]
}

model UserGroupRelation {
   id        String      @id @default(cuid())
   userId    String
   groupId   String
   createdAt DateTime    @default(now())
   updatedAt DateTime    @updatedAt
   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
   group     Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)

   @@unique(fields: [userId, groupId], name: "relationId")
}

model Post {
   id            String      @id @default(cuid())
   title         String
   content       String
   category      PostCategory
   createdUserId String
   isPrivate     Boolean
   groupId       String?
   createdAt     DateTime    @default(now())
   updatedAt     DateTime    @updatedAt
   createdUser   User     @relation(fields: [createdUserId], references: [id], onDelete: Cascade)
   group         Group?     @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum PostCategory {
  GIVE_ME
  GIVE_YOU
}
