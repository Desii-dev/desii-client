datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                       String              @id @default(cuid())
  name                     String
  email                    String              @unique
  emailVerified            DateTime?
  description              String?
  image                    String?
  accessToken              String?             @db.Text
  createdAt                DateTime            @default(now())
  updatedAt                DateTime            @updatedAt
  accounts                 Account[]
  sessions                 Session[]
  adminGroups              Group[]
  userGroupRelations       UserGroupRelation[]
  posts                    Post[]
  favorites                Favorite[]
  createdUserNotifications Notification[]      @relation(name: "createdUser")
  targetUserNotifications  Notification[]      @relation(name: "targetUser")
  member1Rooms             OneOnOneRoom[]      @relation(name: "member1")
  member2Rooms             OneOnOneRoom[]      @relation(name: "member2")
  readManagements          ReadManagement[]

}

model Group {
  id                 String              @id @default(cuid())
  name               String
  description        String?
  image              String
  adminUserId        String
  productId          String              @unique
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  adminUser          User                @relation(fields: [adminUserId], references: [id], onDelete: Restrict)
  userGroupRelations UserGroupRelation[]
  posts              Post[]
}

model UserGroupRelation {
  id        String   @id @default(cuid())
  userId    String
  groupId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique(fields: [userId, groupId], name: "relationId")
}

model Post {
  id               String            @id @default(cuid())
  title            String
  content          String
  category         PostCategory
  createdUserId    String
  isPrivate        Boolean
  groupId          String?
  bgImage          String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  createdUser      User              @relation(fields: [createdUserId], references: [id], onDelete: Cascade)
  group            Group?            @relation(fields: [groupId], references: [id], onDelete: Cascade)
  favorites        Favorite[]
  TagPostRelations TagPostRelation[]
}

model Favorite {
  id            String   @id @default(cuid())
  createdUserId String
  postId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  createdUser   User     @relation(fields: [createdUserId], references: [id], onDelete: Cascade)
  post          Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique(fields: [createdUserId, postId], name: "favoriteId")
}

model Tag {
  id               String            @id @default(cuid())
  name             String            @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  TagPostRelations TagPostRelation[]
}

model TagPostRelation {
  id        String   @id @default(cuid())
  tagId     String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique(fields: [tagId, postId], name: "tagPostRelationId")
}

model Notification {
  id            String           @id @default(cuid())
  type          NotificationType
  createdUserId String?
  targetUserId  String
  message       String
  url           String
  isChecked     Boolean
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  createdUser User? @relation(name: "createdUser", fields: [createdUserId], references: [id], onDelete: Cascade)
  targetUser  User  @relation(name: "targetUser", fields: [targetUserId], references: [id], onDelete: Cascade)
}

model OneOnOneRoom {
  id            String   @id @default(cuid())
  memberId1     String
  memberId2     String
  latestMessage String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  member1 User @relation(name: "member1", fields: [memberId1], references: [id], onDelete: Cascade)
  member2 User @relation(name: "member2", fields: [memberId2], references: [id], onDelete: Cascade)
  @@unique(fields: [memberId1, memberId2], name: "OneOnOneRoomId")
}

// typeがMEDIAの場合は、画像のリンク。typeがpostの場合はpostId
// targetIdはOneOnOneRoomIdか、groupId
model Message {
  id        String      @id @default(cuid())
  type      MessageType
  targetId  String
  userId    String
  body      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  ReadManagements ReadManagement[]
}

model ReadManagement {
  id           String   @id @default(cuid())
  targetUserId String
  MessageId    String
  isRead       Boolean
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  targetUser User    @relation(fields: [targetUserId], references: [id], onDelete: Cascade)
  message    Message @relation(fields: [MessageId], references: [id], onDelete: Cascade)

  @@unique(fields: [targetUserId, MessageId], name: "ReadManagementId")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum PostCategory {
  GIVE_ME
  GIVE_YOU
}

enum NotificationType {
  FETCH_REACTION
  MATCH_POST
}

enum MessageType {
  TEXT
  MEDIA
  POST
}
