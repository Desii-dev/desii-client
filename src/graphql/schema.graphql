### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Favorite {
  createdAt: DateTime!
  createdUser: User!
  createdUserId: String!
  id: String!
  post: Post!
  postId: String!
  updatedAt: DateTime!
}

type Group {
  adminUserId: String!
  createdAt: DateTime!
  description: String
  id: String!
  image: String!
  name: String!
  productId: String!
  updatedAt: DateTime!
}

type MatchingPostInfoType {
  count: Int!
  post: Post!
}

type Message {
  body: String!
  createdAt: DateTime!
  id: String!
  roomId: String!
  type: MessageType!
  updatedAt: DateTime!
  userId: String!
}

enum MessageType {
  MEDIA
  POST
  TEXT
}

type Mutation {
  CreateMessage(body: String!, messageType: MessageType!, roomId: String!): Message!
  CreateRoom(memberId: String!): Room!
  DeleteFavorite(postId: String!): Favorite!
  DeleteMessage(id: String!): Message!
  DeleteRoom(id: String!): Room!
  DeleteTagPostRelation(postId: String!, tagId: String!): TagPostRelation!
  DeleteTagPostRelations(tagPostTypes: [TagPostInputType!]!): [TagPostRelation!]!
  DeleteUserGroupRelation(groupId: String!, userId: String!): UserGroupRelation!
  UpdateNotification(id: String!, isChecked: Boolean!): Notification!
  UpdateReadManagement(messageId: String!, targetUserId: String!): ReadManagement!
  createFavorite(postId: String!): Favorite!
  createGroup(description: String, image: String!, name: String!, productId: String!): Group!
  createPost(bgImage: String, category: PostCategory!, content: String!, groupId: String, isPrivate: Boolean!, title: String!): Post!
  createTag(name: String!): Tag!
  createTagPostRelation(postId: String!, tagId: String!): TagPostRelation!
  createTagPostRelations(postId: String!, tagIds: [String!]!): [TagPostRelation!]!
  createUser(description: String, email: String!, image: String, name: String!): User!
  createUserGroupRelation(groupId: String!, userId: String!): UserGroupRelation!
  deleteGroup(id: String!): Group!
  deletePost(id: String!): Post!
  deleteUser(id: String!): User!
  updateGroup(adminUserId: String, description: String, id: String!, image: String, name: String): Group!
  updatePost(bgImage: String, category: PostCategory, content: String, id: String!, isPrivate: Boolean, title: String): Post!
  updateUser(description: String, email: String, id: String!, image: String, name: String): User!
}

type Notification {
  createdAt: DateTime!
  createdUserId: String
  id: String!
  isChecked: Boolean!
  message: String!
  targetUserId: String!
  type: NotificationType!
  updatedAt: DateTime!
  url: String!
}

enum NotificationType {
  FETCH_REACTION
  MATCH_POST
}

type Post {
  bgImage: String
  category: PostCategory!
  content: String!
  createdAt: DateTime!
  createdUserId: String!
  groupId: String
  id: String!
  isPrivate: Boolean!
  title: String!
  updatedAt: DateTime!
}

enum PostCategory {
  GIVE_ME
  GIVE_YOU
}

type Query {
  GetFavorites(createdUserId: String, postId: String, sort: orderByType = asc): [Favorite!]!
  GetMatchingPosts(postId: String!): [MatchingPostInfoType!]!
  GetMessages(roomId: String!, sort: orderByType = asc): [Message!]!
  GetNotifications(sort: orderByType = asc, targetUserId: String!): [Notification!]!
  GetPosts(groupId: String, isPrivate: Boolean, limit: Int, page: Int, sort: postOrderByType = asc, userId: String): [Post!]!
  GetReadManagement(messageId: String!, targetUserId: String!): ReadManagement
  GetRoom(id: String!): Room
  GetTagByName(name: String!): Tag
  GetTagPostRelations(postId: String, tagId: String): [TagPostRelation!]!
  GetUserGroupRelations(groupId: String, userId: String): [UserGroupRelation!]!
  getAllTags(searchText: String, sort: orderByType = asc): [Tag!]!
  getCurrentUser(accessToken: String!): User
  getGroup(id: String!): Group
  getPost(id: String!): Post
  getRoomMembers(roomId: String, userId: String): [RoomMember!]!
  getUser(id: String!): User
}

type ReadManagement {
  createdAt: DateTime!
  id: String!
  isRead: Boolean!
  messageId: String!
  targetUserId: String!
  updatedAt: DateTime!
}

type Room {
  createdAt: DateTime!
  groupId: String
  id: String!
  latestMessage: Message
  latestMessageId: String
  updatedAt: DateTime!
}

type RoomMember {
  createdAt: DateTime!
  id: String!
  room: Room!
  roomId: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type Tag {
  createdAt: DateTime!
  id: String!
  name: String!
  updatedAt: DateTime!
}

input TagPostInputType {
  postId: String!
  tagId: String!
}

type TagPostRelation {
  createdAt: DateTime!
  id: String!
  post: Post!
  postId: String!
  tag: Tag!
  tagId: String!
  updatedAt: DateTime!
}

type User {
  accessToken: String
  createdAt: DateTime!
  description: String
  email: String!
  emailVerified: DateTime
  id: String!
  image: String
  name: String!
  updatedAt: DateTime!
}

type UserGroupRelation {
  createdAt: DateTime!
  group: Group!
  groupId: String!
  id: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

enum orderByType {
  asc
  desc
}

enum postOrderByType {
  asc
  desc
  favorite
}
